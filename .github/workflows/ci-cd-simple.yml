name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0.x"
  SOLUTION_FILE: "Dastardly.slnx"

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

      - name: Run unit tests
        run: dotnet test ${{ env.SOLUTION_FILE }} --configuration Release --no-build --verbosity normal

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            src/WebApi/bin/Release/net9.0/
          retention-days: 30

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Check for vulnerable packages
        run: dotnet list package --vulnerable --include-transitive
        continue-on-error: true

      - name: Install and run outdated packages check
        run: |
          dotnet tool install --global dotnet-outdated-tool
          dotnet outdated ${{ env.SOLUTION_FILE }}
        continue-on-error: true

  # Code Quality Analysis (Optional - requires SonarCloud setup)
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    if: false # Disabled by default - enable when SonarCloud is configured

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install SonarCloud scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Build and analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -n "${{ secrets.SONAR_TOKEN }}" ]; then
            dotnet sonarscanner begin /k:"michal-gajda_Dastardly" /o:"michal-gajda" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
            dotnet build ${{ env.SOLUTION_FILE }} --configuration Release
            dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          else
            echo "SonarCloud token not configured - skipping analysis"
          fi
        continue-on-error: true
